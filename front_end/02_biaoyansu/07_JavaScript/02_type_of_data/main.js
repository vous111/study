// ******************************************************************************
// Number

//判断一个值是否为整型
Number.isInteger(1); // true
Number.isInteger(1.1); // false

//其他类型转整型
parseInt("1"); // 1
parseInt("1.1"); // 1
parseInt("1.9"); // 1
parseInt("1a"); // 1
parseInt("a1"); // NaN
parseInt(".9"); // NaN
parseInt("0.9"); // 0

//其他类型转浮点数
parseFloat("1"); // 1
parseFloat("1.0"); // 1
parseFloat("1.1"); // 1.1
parseFloat("1.1a"); // 1.1
parseFloat("a1.1"); // NaN
parseFloat(".1"); // 0.1

//NaN 一般在出错或不可预料的结果中出现
NaN === NaN; // false
isNaN(1); // false
isNaN(0 / 0) + // true
//在其他类型前加+可以快速将其转换为数字类型
"1" + // 1
"" + // 0
"1.1" + // 1.1
true + // 1
  false; // 0


// ******************************************************************************
// String

//获得字符串中的某一个字符
"yo".charAt(0); // "y" 程序员是从0开始数的
"yo".charAt(1); // "o"
"yo"[0]; // "y"

//检查一段字符是否包含另一段字符
"花花你好".includes("花花"); // true
"花花你好".includes("拴蛋"); // false

// 用字符串将字符串分割为数组
"花花→_→拴蛋→_→背背".split("→_→"); // ["花花", "拴蛋", "背背"]

// 连接字符串
"y".concat("ooo", "oo", "o"); // "yoooooo"，依次连接传入的字符，传参数量不限

// 截取字符串
var str = "王花花和小熊跳舞跳呀跳呀一二一";
str.slice(3, 8); // "和小熊跳舞"，第一个传参为开始索引，第二个传参为结束索引
str.slice(3); // "和小熊跳舞跳呀跳呀一二一"，若省略第二个传参将会截取至最后一个字符

// .trim 移除两头的空格
"  yo  ".trim(); // "yo"
"  yo".trim(); // "yo"

// 单双引号定义的字符串不可直接断行，断行可以需使用加号连接
// '他好
// 我也好' // SyntaxError（语法错误）
// -----------------------
"他好" + "我也好"; // '他好我也好'

// 字符串与数字运算时需要格外小心
"1" + 1; // "11" 坑
1 + "1"; // 2
2 * "2"; // 4 (O_o)???
"2" * 2; // 4 (O_o)???

// ******************************************************************************
// Array

// .push(新元素) 从末尾添加
var arr = [3, 4, 5];
arr.push(6); // 4 返回修改后的长度
console.log(arr); // [3, 4, 5, 6]

// .unshift(新元素) 从开头添加
var arr = [3, 4, 5];
arr.unshift(2); // 4 返回修改后的长度
console.log(arr); // [2, 3, 4, 5]

// .pop() 从末尾删
var arr = [3, 4, 5, 6];
arr.pop(); // 6 返回被删除的数
console.log(arr); // [3, 4, 5]

// .shift() 从开头删
var arr = [2, 3, 4, 5];
arr.shift(); // 2 返回被删除的数
console.log(arr); // [3, 4, 5]

// .reverse() 颠倒顺序
[1, 2, 3].reverse(); // [3, 2, 1]

// .splice(从哪剪, 剪多长, 替换元素1, 替换元素2) 剪接
var 片儿 = ['a', 'b', '辣鸡1', '辣鸡2', 'c'];
// 从第3格开始剪，剪2格
片儿.splice(2, 2); // ["辣鸡1", "辣鸡2"] 返回减掉的东西
console.log(片儿); // ["a", "b", "c"]
// 注意，现在片儿已经剪成了['a', 'b', 'c']
// 从第2格开始剪，剪1格，进两个广告
片儿.splice(1, 1, '广告1', '广告2');
console.log(片儿); // ["a", "广告1", "广告2", "c"]

// .slice(从哪剪，在哪停) 剪裁(返回剪裁的新数组，不影响原数组)
var 片儿 = ['a', 'b', '辣鸡1', '辣鸡2', 'c'];
// 从第3格开始剪，剪2格
var 垃圾堆 = 片儿.slice(2, 4); // ["辣鸡1", "辣鸡2"] 返回减掉的东西
console.log(垃圾堆); // ["辣鸡1", "辣鸡2"]

// .forEach(回调函数) 迭代
['a', 'b', 'c'].forEach(function(每一条, 索引) { 
    console.log('第' + 索引 + '条：' + 每一条);
  });
  
  //------Console------
  // 第0条：a
  // 第1条：b
  // 第2条：c

// .filter(回调函数) 过滤器
var 旧数组 = [1, 2, 3, 4];
var 新数组 = 旧数组.filter(
  // 传入一个函数，每迭代一个元素就执行一次
  function(元素, 索引, 原始数组) {
    // 只要大于2的元素
    var 条件 = 元素 > 2;
    return 条件;
  }
);
console.log(新数组); // [3, 4]

// .every(回调函数) 每一条
var 满足 = [1, 2, 3].every(
    // 传入一个函数，每迭代一个元素就执行一次
    function(元素, 索引, 原始数组) {
      // 是否小于10
      var 条件 = 元素 < 10;
      return 条件;
    }
  );
  /*只有当所有条件都满足时才返回true*/
  console.log(满足); // true